= Manual del Bot de Trading Automatizado con Kraken y TradingView
:sectnums:
:toc:

== 1. Objetivo del Proyecto

Automatizar operaciones de compra y venta de criptomonedas en el exchange Kraken usando señales (webhooks) provenientes de TradingView. El bot aplica lógica de trailing stop, reinversión automática, venta manual, y manejo avanzado de errores.

== 2. Componentes Principales

=== 2.1 server.js
Recibe alertas vía POST /alerta, valida datos, decide inversión y ejecuta la compra. Permite personalizar la cantidad a invertir o usar reinversión automática. Registra cada operación en PostgreSQL. También expone los endpoints:

GET /estado: estado actual de activos y última venta

GET /historial: lista completa de operaciones

GET /historial/:par: operaciones históricas filtradas por par

=== 2.2 tradeManager.js
Proceso que monitorea continuamente los trades activos. Aplica trailing stop y ejecuta ventas automáticas:

Coloca orden LIMIT si cae al 80 % del trailing stop, crea el límit por el valor del límite inferior del trailing El stopPrice. (O sea, si

Ejecuta venta a mercado si sigue cayendo después del la orden de venta límit (por si no se ha ejecutado). Para ello deberá cancelar la orden limit y después vender a mercado.

Por cierto, cancela la orden LIMIT si el precio se recupera y 

Detecta ejecuciones completas y registra el fee

=== 2.3 venderManual.js
Permite forzar manualmente la venta de una operación activa específica, ejecutando una orden a mercado del 100% de la cantidad.

== 3. Lógica de Inversión

Si el webhook incluye "inversion": se usa ese valor exacto.

Si no, y hay operaciones anteriores: se reinvierte el capital obtenido.

Si es la primera vez: se invierten 40 EUR por defecto.

Cambiar solo el trailing no afecta la lógica de inversión.

== 4. Formato de Webhook desde TradingView

=== Reinvierte automáticamente (por defecto 40€ si es la primera vez)
[source,json]
{
"par": "ADAEUR",
"trailingStopPercent": 6
}

=== Compra con inversión personalizada
[source,json]
{
"par": "ETHEUR",
"trailingStopPercent": 7,
"inversion": 50
}

== 5. API del Bot

=== POST /alerta
Procesa una nueva orden de compra. Valida campos y ejecuta si las condiciones se cumplen.

=== GET /estado
Devuelve el estado actual de:

Todas las operaciones activas

Última operación completada (precio, ganancia, fee)

=== GET /historial
Devuelve la lista completa de transacciones (activas y completadas)

=== GET /historial/:par
Devuelve el historial de transacciones filtrado por par (ej. ADAEUR)

== 6. Comandos Curl para pruebas

=== Enviar orden desde terminal
[source,bash]
curl -X POST https://bot-kraken-openai-production.up.railway.app/alerta -H "Content-Type: application/json" -d '{"par": "ADAEUR", "trailingStopPercent": 6}'

=== Inversión personalizada
[source,bash]
curl -X POST https://bot-kraken-openai-production.up.railway.app/alerta -H "Content-Type: application/json" -d '{"par": "ETHEUR", "trailingStopPercent": 7, "inversion": 50}'

=== Consultar estado
[source,bash]
curl https://bot-kraken-openai-production.up.railway.app/estado

=== Consultar historial completo
[source,bash]
curl https://bot-kraken-openai-production.up.railway.app/historial

=== Consultar historial por par
[source,bash]
curl https://bot-kraken-openai-production.up.railway.app/historial/ADAEUR

== 7. Archivos Clave

server.js → compra, validación, API REST y endpoints auxiliares

tradeManager.js → trailing stop, ventas automáticas, fees

venderManual.js → salida manual

krakenClient.js → interfaz segura con API de Kraken

package.json → dependencias

railway.json → configuración para Railway

.env → claves privadas de Kraken y URL de PostgreSQL

== 8. GitHub y Railway

=== GitHub
Repositorio donde se alojan los archivos y desde donde Railway hace los despliegues.

=== Railway
Servicio donde está desplegado el contenedor Docker. Conectado a GitHub.

PostgreSQL gestionado desde Railway

Variables de entorno configuradas desde el panel

== 9. Validación del Webhook

Validaciones implementadas en server.js:

"par": debe estar presente y ser string

= Manual del Bot Kraken OpenAI
:toc:
:sectnums:

== 1. Objetivo General

Desarrollar un bot de trading automatizado para Kraken que:

Ejecuta compras automáticas en función de alertas recibidas (webhook).

Gestiona de forma inteligente la venta usando trailing stop.

Permite control manual mediante scripts locales.

Registra toda la actividad en una base de datos PostgreSQL.

== 2. Arquitectura y Componentes

=== Railway

URL: https://bot-kraken-openai-production.up.railway.app

Base de datos PostgreSQL gestionada por Railway.

Variables de entorno:

API_KEY, API_SECRET: credenciales Kraken.

DATABASE_URL: cadena de conexión privada Railway.

PORT: puerto 3000 por defecto.

=== GitHub

Repo: https://github.com/Juainit/bot-kraken-openai

Deploy automático mediante integración continua (push → deploy).

== 3. Estructura de Archivos

server.js: gestiona las alertas, endpoints REST, y control manual.

tradeManager.js: proceso en segundo plano que monitoriza operaciones activas y gestiona trailing stop.

krakenClient.js: cliente Kraken API con manejo de errores robusto.

/Scripts/*.command: scripts ejecutables para control manual desde el sistema operativo (macOS).

.env: credenciales y configuraciones locales.

package.json: dependencias y configuración del proyecto Node.js.

start.sh: script de inicio para lanzar ambos procesos (server.js y tradeManager.js).

== 4. Endpoints y Webhooks

=== POST /alerta
Recibe alertas como:

{
  "par": "LAYERUSD",
  "trailingStopPercent": 6
}

Realiza compra automática e inicia seguimiento con trailing stop.

=== GET /estado
Devuelve operaciones activas y la última completada.

=== GET /historial
Devuelve todo el historial de transacciones.

=== GET /historial/:par
Devuelve historial filtrado por par (ej. /historial/TAOUSD).

=== POST /vender
Permite venta manual:

{
  "pair": "TAOUSD",
  "tipo": "mercado", // o "limite"
  "porcentaje": 50,
  "precioLimite": 320 // solo si tipo = limite
}

== 5. Lógica del Bot (tradeManager.js)

Revisa operaciones activas cada minuto y aplica esta estrategia:

Si el precio sube, actualiza highestPrice y cancela orden limitada.

Si baja un 75% del trailing, coloca venta limitada al precio del 100% del trailing.

Si luego sube, cancela esa orden.

Si baja un 20% más desde el stopPrice, ejecuta venta de emergencia a mercado.

Se calculan y registran beneficios y comisiones (feeEUR), incluso para emergencias.

== 6. Scripts Manuales (macOS)

Están en /Scripts/, se ejecutan con doble clic. Incluyen:

comprar.command: compra una moneda especificando par, trailing, e inversión.

vender.command: venta rápida a mercado.

vender_avanzado.command: permite elegir venta a mercado o límite, cantidad y precio.

estado.command: muestra operaciones activas y última venta.

historial.command: muestra historial completo.

historial_moneda.command: historial filtrado por par.

manual.command: selector para todas las acciones anteriores.

== 7. Base de Datos (PostgreSQL)

Tabla: trades

CREATE TABLE trades (
  id SERIAL PRIMARY KEY,
  pair TEXT NOT NULL,
  quantity NUMERIC NOT NULL,
  buyPrice NUMERIC NOT NULL,
  highestPrice NUMERIC NOT NULL,
  stopPercent NUMERIC NOT NULL,
  sellPrice NUMERIC,
  status TEXT NOT NULL,
  profitPercent NUMERIC,
  feeEUR NUMERIC,
  createdAt TIMESTAMP NOT NULL DEFAULT NOW()
);

== 8. Deployment

git add .
git commit -m "feat: actualizar lógica de trailing y venta manual"
git push # railway despliega

== 9. Utilidades Locales

brew install libpq

psql "<DATABASE_PUBLIC_URL>" -c "ALTER TABLE trades ALTER COLUMN feeEUR DROP NOT NULL;"

== 10. Errores Comunes y Solución

❌ kraken.api is not a function → revisar krakenClient.js y exportaciones.

❌ getaddrinfo ENOTFOUND postgres.railway.internal → intentar ejecutar desde fuera de Railway.

❌ Venta no aparece → revisar que se actualiza la base de datos tras vender.

== 11. Próximos pasos

Exportar todo el historial a CSV.

Notificaciones por Telegram tras cada operación.

Análisis visual de beneficios desde dashboard.

== 12. Contacto y Mantenimiento

Mantenedor: Joan Subirachs

GitHub: https://github.com/Juainit/bot-kraken-openai

Railway: https://bot-kraken-openai-production.up.railway.app

ENTIENDO QUE HAY EL BOT DIVIDIDO EN UN ARCHIVO QUE COMPRA (SERVER) Y UN ARCHIVO QUE VENDE SEGÚN LOS PARÁMETROS DE TRAILING (TRADEMANAGER)


Consideraciones del asistente, obligaciones:

1. Los conocimientos de programación son muy limitados de la persona a la que se dirige el asistente. El asistente debe mostrar los pasos 1 por 1, nunca mas de una secuencia de más de dos pasos.
2. Nunca debe dar por supuesto la persona sabe que un comando debe ponerlo en Terminal o en un archivo de visual studio code, el asistente debe decirlo antes siempre; por ejemplo: “abre terminal y copia esto:” ,o, “En Visual Studo Code, abre el archivo server.js y copia este codigo:”.
3. El asistente nunca debe mostrar las modificaciones de codigo aisladas, en otras palabras, el asistente siempre debe mostrar el codigo listo y entero para que la persona lo copie entero y lo pegue entero. O sea, nunca sugerencias como: “cambia esta parte del código de server.js por esta otra”. Siempre se debe poner todo el codigo desde la primera hasta la última linea del archivo, para que el individuo lo pueda pegar todo entero.
4. Se dispone de Terminal, Visual Studio Code, Github, Railway, Tradingview.
5. Envíame los pasos como texto continuo, no como lista numerada. Hazlo todo en texto plano, sin listas numeradas tipo markdown. Usa comentarios cuando sea necesario. No uses funciones avanzadas ni herramientas adicionales como File Search o Code Interpreter. Solo explícame cómo hacerlo directamente desde mi Mac en local. 
6. Uso la carpeta `bot-kraken-openai` en mi escritorio.


